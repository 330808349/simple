1、系统必须对用户输入的数据进行过滤，必须在输出时进行相应的html实体编码、JavaScript编码，防范跨站脚本攻击。
"2、应用程序必须对用户输入的数据进行SQL语句特征过滤，必须安全的进行数据库操作，防范SQL注入攻击，JAVA推荐使用预编译语句，绑定变量；存储过程或OWASP ESAPI安全函数。
底层用了sql或者hql要用占位符一个一个扫"
"3、应用程序必须对用户输入的文件名进行控制，对包含了恶意的符号（例如：～、%、../）或者空字节进行拒绝，并使用绝对路径+参数来控制访问目录，防范路径遍历攻击。
不用管"
"4、对于提供上传功能的系统，必须在服务器端使用白名单的方式限制上传的文件类型，根据规则重新构造文件名，并对上传的目录设置禁止脚本执行的权限，防范上传后门脚本攻击。
上传的地方控制上传文件的后缀名"
"5、应用系统必须采取措施防范恶意提交数据或查询，降低拒绝服务攻击的风险，比如限制提交的次数或输入验证码；例如：系统发送邮件和短信时，必须设置时间限制，比如90秒内仅允许发送一次；在下单时，设置1个客户端在1分钟内连续下单一定次数时，就需要输入验证码；在查询订单时，设置一个客户端每次可以查询的订单数以及在1分钟内可以连续查询的次数，超过一定次数就抛弃该请求。
只对登陆进行限制，同一个IP1分钟之内连续报错就加黑名单"
6、禁止在代码中包含技术性的注释语句，禁止向用户提供包含技术相关的错误提示。
7、研发人员禁止在系统中留有后门。
"8、必须提供统一的出错处理模块，不能仅仅依赖内部系统的错误处理功能，从而暴露系统底层系统的详细信息，尤其错误信息中不能包含变量名、变量类型、SQL字串、或者源代码等。
阿修罗已经有，不用处理"
9、生产系统禁止开启调试模式，如：struts.devMode=false
10、系统在转测试前，必须经过源代码扫描，对发现的高、中安全风险漏洞需要立即整改。
11、新系统或涉及信息安全功能的系统版本上线前必须进行安全测试，对存在高、中安全风险的系统需要立即进行整改。信息安全功能包括权限控制、身份验证、加解密、密码保护、安全日志记录、安全漏洞整改
12、系统上线后，发现的高级别安全风险漏洞必须在一周内整改完成；中风险级别漏洞必须在两周整改完成。
