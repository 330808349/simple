com.sfa.hcc.event.push.rule.scan;
import java.util.Map;
import org.apache.logging.log4j.LogManager;import org.apache.logging.log4j.Logger;import org.springframework.core.io.Resource;import org.springframework.core.io.support.PathMatchingResourcePatternResolver;import org.springframework.core.io.support.ResourcePatternResolver;import org.springframework.core.type.classreading.CachingMetadataReaderFactory;import org.springframework.core.type.classreading.MetadataReader;import org.springframework.core.type.classreading.MetadataReaderFactory;import org.springframework.util.ClassUtils;
import com.sfa.hcc.event.push.rule.Rule;
/** *  * @author 89003412 * */public class ScanBeanDefaultParser {        private static final Logger logger = LogManager.getLogger(TaskScanBeanDefaultParser.class);        /**     *      * @param rules     * @param path     * @return     */    public static  Map<String,Rule>  parse(Map<String,Rule> rules,String path) {        ResourcePatternResolver resourcePatternResolver = new PathMatchingResourcePatternResolver();        String basePackage = "";        try {            String pattern = ResourcePatternResolver.CLASSPATH_ALL_URL_PREFIX                    + ClassUtils.convertClassNameToResourcePath(basePackage) + path;            resourcePatternResolver.getResources(pattern);            Resource[] resources = resourcePatternResolver.getResources(pattern);            MetadataReaderFactory readerFactory = new CachingMetadataReaderFactory(resourcePatternResolver);            String name;            for (Resource resource : resources) {                MetadataReader reader = readerFactory.getMetadataReader(resource);                String className = reader.getClassMetadata().getClassName();                Class<?> clazz = Class.forName(className);                org.easyrules.annotation.Rule rule = clazz.getAnnotation(org.easyrules.annotation.Rule.class);                if (rule == null) {                    continue;                }                name = rule.name();                if(name==null){                    name = className.substring(className.lastIndexOf("."));                }                rules.put(rule.name(),(Rule) clazz.newInstance());                logger.info(" 规则类 :" + name + " 已经注册 .");            }        } catch (Exception e) {            e.printStackTrace();            logger.error(" 扫描 规则执行文件报错,错误信息为 : " + e);        }        return rules;    }
}
