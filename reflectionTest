package com.simple.reflectionTest;

import java.lang.reflect.Field;
import java.lang.reflect.Method;

public class Person {
	
	
	private String name ;
	private Integer age;
	
	public String  exec(String name){
		System.out.println("======" + name + "========");
		return  name ;
		
	}
	
	
	public String getName() {
		return name;
	}


	public void setName(String name) {
		this.name = name;
	}


	public Integer getAge() {
		return age;
	}


	public void setAge(Integer age) {
		this.age = age;
	}

	/**
	 *  对一个类根据类的 全名 通过反射 操作 类的 属性和方法
	 * @param args
	 */
	public static void main(String[] args) {
		try {
			
			
			Class<?> cla = Class.forName("com.simple.reflectionTest.Person");
			System.out.println(cla.getName());
			Field[] fields = cla.getDeclaredFields();
			for (Field field : fields) {
				System.out.println("=== field ===" + field.getName());
			}
			Method[] methods = cla.getDeclaredMethods();
			for (Method method : methods) {
				System.out.println("==== method ====" + method.getName());
				Class<?>[] clazz = method.getParameterTypes();
				for (Class type : clazz) {
					System.out.println("==== type ====" + type.toString());
					System.out.println("=====String ===" + ( String.class == type));
					System.out.println("=====int =====" + ( Integer.class == type));
				}
				if("exec".equals(method.getName())){
					method.setAccessible(true);
					method.invoke(cla.newInstance(), new Object[]{"1234124124124"});
				}
				
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

}
