#@PostConstruct 和 @PreDestroy 
                
package com.baobaotao;

import javax.annotation.Resource;
import javax.annotation.PostConstruct;
import javax.annotation.PreDestroy;

public class Boss {
    @Resource
    private Car car;

    @Resource(name = "office")
    private Office office;

    @PostConstruct
    public void postConstruct1(){
        System.out.println("postConstruct1");
    }

    @PreDestroy
    public void preDestroy1(){
        System.out.println("preDestroy1"); 
    }
    …
}
您只需要在方法前标注 @PostConstruct 或 @PreDestroy，这些方法就会在 Bean 初始化后或销毁之前被 Spring 容器执行了。

------------------------------------------------------------------------------------------------------------------------

#@Qualifier 注释指定注入 Bean 的名称                
@Autowired
public void setOffice(@Qualifier("office")Office office) {
    this.office = office;
}
@Qualifier("office") 中的 office 是 Bean 的名称，所以 @Autowired 和@Qualifier 结合使用时，
自动注入的策略就从 byType 转变成 byName 了。@Autowired 可以对成员变量、方法以及构造函数进行注释，
而@Qualifier 的标注对象是成员变量、方法入参、构造函数入参。正是由于注释对象的不同，所以 Spring 不将 
@Autowired 和@Qualifier 统一成一个注释类。下面是对成员变量和构造函数入参进行注释的代码：对成员变量进行注释：

-------------------------------------------------------------------------------------------------------------------------

#<context:annotationconfig/> 
将隐式地向 Spring 容器注册
AutowiredAnnotationBeanPostProcessor、
CommonAnnotationBeanPostProcessor、
PersistenceAnnotationBeanPostProcessor 
以及equiredAnnotationBeanPostProcessor 这 4 个 BeanPostProcessor。
在配置文件中使用 context 命名空间之前，必须在 <beans> 元素中声明 context 命名空间。

---------------------------------------------------------------------------------------------------------------------------

# @Component
虽然我们可以通过 @Autowired 或 @Resource 在 Bean 类中使用自动注入功能，
但是 Bean 还是在 XML 文件中通过 <bean> 进行定义 —— 也就是说，在 XML 配置文件中定义 Bean，
通过@Autowired 或 @Resource 为 Bean 的成员变量、方法入参或构造函数入参提供自动注入的功能。
能否也通过注释定义 Bean，从 XML 配置文件中完全移除 Bean 定义的配置呢？答案是肯定的，
我们通过 Spring 2.5 提供的@Component 注释就可以达到这个目标了。
为什么 @Repository 只能标注在 DAO 类上呢？这是因为该注解的作用不只是将类识别为 Bean，
同时它还能将所标注的类中抛出的数据访问异常封装为 Spring 的数据访问异常类型。
Spring 本身提供了一个丰富的并且是与具体的数据访问技术无关的数据访问异常结构，
用于封装不同的持久层框架抛出的异常，使得异常独立于底层的框架。
Spring 2.5 在 @Repository 的基础上增加了功能类似的额外三个注解：@Component、@Service、@Constroller，
它们分别用于软件系统的不同层次：@Component 是一个泛化的概念，仅仅表示一个组件 (Bean) ，可以作用在任何层次。
@Service 通常作用在业务层，但是目前该功能与 @Component 相同。@Constroller 通常作用在控制层，但是目前该功能与 
@Component 相同。通过在类上使用 @Repository、@Component、@Service 和 @Constroller 注解，Spring 会自动创建相应的
BeanDefinition 对象，并注册到 ApplicationContext 中。这些类就成了 Spring 受管组件。这三个注解除了作用于不同软件层次的类，
其使用方式与 @Repository 是完全相同的。
